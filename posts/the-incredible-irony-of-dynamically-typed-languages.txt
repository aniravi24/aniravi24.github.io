1:"$Sreact.fragment"
3:I[1316,[],""]
4:I[9106,[],""]
5:I[2387,["482","static/chunks/482-cfe77551e7974ec7.js","869","static/chunks/app/posts/the-incredible-irony-of-dynamically-typed-languages/page-c23024b981d77ad7.js"],"Link"]
6:I[8549,["482","static/chunks/482-cfe77551e7974ec7.js","869","static/chunks/app/posts/the-incredible-irony-of-dynamically-typed-languages/page-c23024b981d77ad7.js"],"GoBack"]
d:I[8272,[],""]
:HL["/_next/static/css/e7579b16c1ac41a4.css","style"]
0:{"P":null,"b":"XIY1aVDRMP1-GJ4AfhQjJ","p":"","c":["","posts","the-incredible-irony-of-dynamically-typed-languages"],"i":false,"f":[[["",{"children":["posts",{"children":["the-incredible-irony-of-dynamically-typed-languages",{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e7579b16c1ac41a4.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],"$L2"]}],{"children":["posts",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["the-incredible-irony-of-dynamically-typed-languages",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":[[["$","h1",null,{"children":"The incredible irony of dynamically-typed languages"}],["$","div",null,{"className":"x:mb-8 x:flex x:gap-3 x:items-center","children":[["$","div",null,{"className":"x:grow x:dark:text-gray-400 x:text-gray-600","children":[["$","div",null,{"className":"x:flex x:flex-wrap x:items-center x:gap-1","children":["Ani Ravi",",",["$","time",null,{"dateTime":"2021-05-11T00:00:00.000Z","children":"5/11/2021"}],["$","span",null,{"className":"x:px-1","children":"•"}],[["$","$L5","Programming",{"href":"/tags/Programming","className":"nextra-tag","children":"Programming"}],["$","$L5","Types",{"href":"/tags/Types","className":"nextra-tag","children":"Types"}],["$","$L5","Languages",{"href":"/tags/Languages","className":"nextra-tag","children":"Languages"}],["$","$L5","Dynamic",{"href":"/tags/Dynamic","className":"nextra-tag","children":"Dynamic"}]]]}],"$undefined"]}],["$","$L6",null,{}]]}],[["$","p",null,{"children":"I come with an extremely strong bias, which is that computers should juggle meaningless minutia, freeing people up to work on more interesting, domain driven problems that actually provide value to the world. In computer programming, the best tool that we have to juggle this meaningless minutia is something called a “type system”, and a very expressive type system like the ones provided in languages such as Haskell allow you to model your domain in code. With the help from tools, languages, and research that’s been around for decades, we can get pretty far with our computer-aided tools. However, the incredible irony is that programmers, whose only job it is to build computers and programs that help us, don’t want to use the tools that we have available to us, that make our jobs as programmers sane. Especially when working on teams with multiple people with serious production codebases that are more than 10 lines of code doing real work such as moving money, or handling your medical records."}],"\n",["$","p",null,{"children":"I find it astounding that entire programming languages and entire industries have been built on disregarding good ideas from the past, so programmers can ship bug after bug caused by “undefined is not a function” or “key foo not found in bar”, or “I expected a Post here, but you gave me a User instead”. Even worse is when the errors are non-trivial, and are deadly silent bugs that would’ve easily been caught by a type system. Our goal as programmers should be to turn as many domain errors into type errors as possible, so the computer can catch our mistakes and we can go on with our lives. Whenever we need to make important changes to our codebase, we should be able to be focused on solving the actual domain specific problem at hand, instead of having to search through the entire codebase to figure out what data structures, functions, or other pieces were affected because of a particular change that was made. We have tools to help us do this, but we code like we’re in the stone age."}],"\n","$L7","\n","$L8","\n","$L9","\n","$La"]],null,"$Lb"]}],{},null,false]},null,false]},null,false]},null,false],"$Lc",false]],"m":"$undefined","G":["$d",[]],"s":false,"S":true}
f:I[2372,[],"OutletBoundary"]
11:I[3660,[],"AsyncMetadataOutlet"]
13:I[2372,[],"ViewportBoundary"]
15:I[2372,[],"MetadataBoundary"]
16:"$Sreact.suspense"
e:T4c5,I’ll be frank. I find this type (no pun intended) of programming insane. Coming back to the point I mentioned earlier, isn’t it amazing that programmers build things to automate so much minutia away but we don’t want to give away control for our own jobs, to a set of tools that could make our jobs so much more interesting than having to spend hours upon hours asking meaningless questions about your code that a tool should answer for you? When a computer can help us write code, we find every excuse to not learn how to use it (e.g. it “slows me down”) and use subpar tools that rely on exerting double or triple the mental effort and time, just to get more buggy code. That mental effort isn’t going toward expanding your mind, learning new ideas, or finding better ways solve problems in your code or in the real world, it’s “where the heck am I using this argument inside this data structure I just changed” or “what is the value or shape of the data I’m passing in here”, AKA meaningless questions that programmers, who get paid so much money, should not be spending half their time thinking about (if you think half is an exaggeration, it’s not off by much when compared to the reality).7:["$","p",null,{"children":"$e"}]
8:["$","p",null,{"children":"Don’t get me wrong, I want to get paid as much as the next person. However, it’s astounding that we are as efficient as we are, given how much time we waste on nonsense that doesn’t have to do with actually solving problems and/or developing more knowledge. Then again, the world is so inefficient that even our inefficiency looks super productive in comparison. That’s the only explanation I think of for how we’ve gotten this far and how we get paid so much given so much code out there is just jungle science and written with very little rigor or attention, using world-class tools that people should be using but don’t."}]
9:["$","p",null,{"children":"There’s light at the end of the tunnel though. Programmers are starting to realize that when they work in a team of more than one person, and their codebase becomes completely unmaintainable within a few years, that there must be a better way. And it turns out there is, not because people have new ideas on how to do things, but because ideas that existed for decades are finally being taken seriously by more than a small handful of passionate programmers. TypeScript is mainstream. Rust is seeing a lot of interest from big and small companies alike, and Rust’s most unique feature (compile-time memory handling with no garbage collector at runtime) is possible because of research on type systems. Haskell is starting to see more serious interest not just from larger companies, but from startups that are taking off."}]
a:["$","p",null,{"children":"A lot of effort into the more niche statically-typed functional programming languages and tools (e.g. Haskell, OCaml) has come from volunteer efforts and a few notable companies, as the number of industrial programmers in these ecosystems is still quite small. As more young companies develop talented engineers that push forward serious, statically-typed languages to do real work that can manage the insane complexity behind large-scale software, there’s hope yet that programming will eventually become sane, and the tools, much more sophisticated. That’s a future I can get behind."}]
b:["$","$Lf",null,{"children":["$L10",["$","$L11",null,{"promise":"$@12"}]]}]
c:["$","$1","h",{"children":[null,[["$","$L13",null,{"children":"$L14"}],null],["$","$L15",null,{"children":["$","div",null,{"hidden":true,"children":["$","$16",null,{"fallback":null,"children":"$L17"}]}]}]]}]
18:I[6606,["482","static/chunks/482-cfe77551e7974ec7.js","530","static/chunks/app/posts/page-5d953d0e9a58097c.js"],"ThemeProvider"]
19:I[2387,["482","static/chunks/482-cfe77551e7974ec7.js","869","static/chunks/app/posts/the-incredible-irony-of-dynamically-typed-languages/page-c23024b981d77ad7.js"],"ViewTransitions"]
1a:I[9389,["482","static/chunks/482-cfe77551e7974ec7.js","530","static/chunks/app/posts/page-5d953d0e9a58097c.js"],"NavbarLink"]
1b:I[6750,["482","static/chunks/482-cfe77551e7974ec7.js","530","static/chunks/app/posts/page-5d953d0e9a58097c.js"],"ThemeSwitch"]
1c:I[714,["410","static/chunks/1ae6eb87-884e6a346c3e9bec.js","482","static/chunks/482-cfe77551e7974ec7.js","674","static/chunks/674-e2aa62206899cd23.js","177","static/chunks/app/layout-19e76fdf8c2e232e.js"],"Search"]
2:["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","link",null,{"rel":"alternate","type":"application/rss+xml","title":"RSS","href":"/feed.xml"}],["$","style",null,{"children":":root {\n  --nextra-primary-hue: 212deg;\n  --nextra-primary-saturation: 100%;\n  --nextra-primary-lightness: 45%;\n  --nextra-bg: 250,250,250;\n  --nextra-content-width: 90rem;\n}\n.dark {\n  --nextra-primary-hue: 204deg;\n  --nextra-primary-saturation: 100%;\n  --nextra-primary-lightness: 55%;\n  --nextra-bg: 17,17,17;\n}\n::selection {\n  background: hsla(var(--nextra-primary-hue),var(--nextra-primary-saturation),var(--nextra-primary-lightness),.3);\n}\nhtml {\n  background: rgb(var(--nextra-bg));\n}"}],["$","meta",null,{"name":"theme-color","media":"(prefers-color-scheme: light)","content":"rgb(250,250,250)"}],["$","meta",null,{"name":"theme-color","media":"(prefers-color-scheme: dark)","content":"rgb(17,17,17)"}],"$undefined"]}],["$","body",null,{"children":["$","$L18",null,{"attribute":"class","children":["$undefined",["$","article",null,{"className":"x:container x:px-4 x:prose x:max-md:prose-sm x:dark:prose-invert","dir":"ltr","data-pagefind-body":true,"children":["$","$L19",null,{"children":[["$","header",null,{"className":"x:mb-8 x:flex x:items-center x:gap-3 x:justify-end","data-pagefind-ignore":"all","children":[[["$","$L1a","/",{"href":"/","children":"Home"}],["$","$L1a","/posts",{"href":"/posts","children":"Posts"}]],[[["$","a","rss",{"href":"/feed.xml","children":"RSS"}],["$","a","github",{"href":"https://github.com/aniravi24","children":"Github"}]],["$","$L1b",null,{}],["$","$L1c",null,{"placeholder":"Search..."}]]]}],["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}],["$","small",null,{"className":"x:mt-32 x:block","data-pagefind-ignore":"all","children":["$","div",null,{"className":"my-4 border-t-2 mx-auto flex items-center sm:flex-row flex-col","children":["$","p",null,{"className":"text-sm text-gray-500","children":"Ani Ravi"}]}]}]]}]}]]}]}]]}]
14:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","2",{"name":"theme-color","content":"#ffffff"}]]
10:null
1d:I[5908,[],"IconMark"]
12:{"metadata":[["$","title","0",{"children":"The incredible irony of dynamically-typed languages"}],["$","meta","1",{"name":"description","content":"Dynamically-typed programming sucks in a real, production codebase. Or anything with more than 10 lines of code."}],["$","link","2",{"rel":"manifest","href":"/manifest.json","crossOrigin":"$undefined"}],["$","meta","3",{"name":"robots","content":"index, follow"}],["$","meta","4",{"name":"msapplication-TileColor","content":"#da532c"}],["$","link","5",{"rel":"icon","href":"/favicon-16.png","sizes":"16x16","type":"image/png"}],["$","link","6",{"rel":"icon","href":"/favicon-32.png","sizes":"32x32","type":"image/png"}],["$","link","7",{"rel":"icon","href":"/favicon-48.png","sizes":"48x48","type":"image/png"}],["$","link","8",{"rel":"apple-touch-icon","href":"/apple-touch-icon.png","sizes":"180x180","type":"image/png"}],["$","$L1d","9",{}]],"error":null,"digest":"$undefined"}
17:"$12:metadata"
